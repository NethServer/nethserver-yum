#!/usr/bin/python

#
# Copyright (C) 2012 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

import yum
import os
import sys
import simplejson
import syslog
import getopt

class JSONDisplayCallBack(yum.rpmtrans.RPMBaseCallback):
    def __init__(self):
        yum.rpmtrans.RPMBaseCallback.__init__(self)
        self.lastmsg = None
        self.lastpackage = None # name of last package we looked at

    def event(self, package, action, te_current, te_total, ts_current, ts_total):
        msg = {
           "package" : "%s" % package,
           "action" : action,
           "te_current" : te_current,
           "te_total" : te_total,
           "ts_current" : ts_current,
           "ts_total" : ts_total,
        }
        if msg != self.lastmsg:
            print simplejson.dumps (msg)
        self.lastmsg = msg
        self.lastpackage = package

    def scriptout(self, package, msgs):
        if msgs:
            print msgs,

def usage():
    print "Usage: %s {<command> {PACKAGE|@GROUP}}..." % sys.argv[0]
    print "    command: [--install|--update|--remove]"
    sys.exit(1)

def main():

    try:
        opts, args = getopt.getopt(sys.argv[1:], '', ['install=','update=','remove='])
    except getopt.GetoptError as err:
        usage()

    if(len(args) > 0 or len(opts) == 0):
        usage()
            
    actions = {'install': [], 'update': [], 'remove': []}

    for key, val in opts:
        map(lambda x: actions[key[2:]].append(x), val.split(','))

    try:
        syslog.openlog('pkgaction',syslog.LOG_PID);
        ypbc = yum._YumPreBaseConf()
        ypbc.debuglevel = -1
        ypbc.errorlevel = -1
        yb = yum.YumBase()
        yb.preconf = ypbc

        for action in ['remove', 'update', 'install']:
            syslog.syslog("%s: %s" % (action, ', '.join(actions[action])))
            for pkg in actions[action]:
                getattr(yb, action)(pattern=pkg)

        yb.resolveDeps()
        yb.processTransaction(rpmDisplay=JSONDisplayCallBack())
    except Exception, e:
        print simplejson.dumps({'exit_code': 1, 'msg': unicode(e)})
        syslog.syslog(syslog.LOG_ERR, "Error '%s'" % e);
        sys.exit(1)

    print simplejson.dumps({'exit_code': 0, 'msg':'' })
    sys.exit(0);

if __name__ == "__main__":
    main()
