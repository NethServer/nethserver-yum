#!/usr/bin/python

#
# Copyright (C) 2012 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

import yum
import os
import sys
import json
import syslog
import getopt
import nethserver.ptrack

class TrackerClientCallBack(yum.rpmtrans.RPMBaseCallback):
    def __init__(self, client, task_id):
        yum.rpmtrans.RPMBaseCallback.__init__(self)
        if(not isinstance(client, nethserver.ptrack.TrackerClient)):
            raise Exception("Invalid nethserver.ptrack.TrackerClient instance")
        self.client = client
        self.task_id = task_id

    def _get_action_name(self, action):
        if action in yum.TS_INSTALL_STATES:
            return 'Installing'
        elif action in yum.TS_REMOVE_STATES:
            return 'Removing'
        else:
            return ''

    def event(self, package, action, te_current, te_total, ts_current, ts_total):
        p = (te_current/float(te_total)) * (ts_current/float(ts_total))
        message = "%s %s" % (package, self._get_action_name(action))
        self.client.set_task_progress(self.task_id, p, message)

    def scriptout(self, package, msgs):
        #print 'scriptout ' + json.dumps(["%s" % package, msgs])
        return yum.rpmtrans.RPMBaseCallback.scriptout(self, package, msgs)

    def errorlog(self, msg):
        #print 'errorlog ' + json.dumps([msg])
        return yum.rpmtrans.RPMBaseCallback.errorlog(self, msg)

    def filelog(self, package, action):
        #print 'filelog ' + json.dumps(["%s" % package, action])
        return yum.rpmtrans.RPMBaseCallback.filelog(self, package, action)

    def verify_txmbr(self, base, txmbr, count):
        #print 'verify_txmbr ' + json.dumps(["%s" % base, "%s" % txmbr, count])
        return yum.rpmtrans.RPMBaseCallback.verify_txmbr(self, base, txmbr, count)


def usage():
    print "Usage: %s {<command> {PACKAGE|@GROUP}}..." % sys.argv[0]
    print "    command: [--install|--update|--remove]"
    sys.exit(1)

def main():

    try:
        opts, args = getopt.getopt(sys.argv[1:], '', ['install=','update=','remove='])
    except getopt.GetoptError as err:
        usage()

    if(len(args) > 0 or len(opts) == 0):
        usage()
            
    actions = {'install': [], 'update': [], 'remove': []}
    tracker_client = None

    for key, val in opts:
        map(lambda x: actions[key[2:]].append(x), val.split(','))

    try:
        tracker_client = nethserver.ptrack.TrackerClient()
        task_yum_id = tracker_client.declare_task("RPM transaction")
        task_sys_id = tracker_client.declare_task("System configuration")
        os.environ["PTRACK_TASKID"] = str(task_sys_id)
        cb = TrackerClientCallBack(tracker_client, task_yum_id)

        syslog.openlog('pkgaction',syslog.LOG_PID);
        ypbc = yum._YumPreBaseConf()
        ypbc.debuglevel = -1
        ypbc.errorlevel = -1
        yb = yum.YumBase()
        yb.preconf = ypbc

        for action in ['remove', 'update', 'install']:
            syslog.syslog("%s: %s" % (action, ', '.join(actions[action])))
            for pkg in actions[action]:
                getattr(yb, action)(pattern=pkg)

        yb.resolveDeps()
        yb.processTransaction(rpmDisplay=cb)        
        tracker_client.set_task_done(task_yum_id)
        tracker_client.set_task_done(task_sys_id)

    except Exception, e:
        syslog.syslog(syslog.LOG_ERR, "Error '%s'" % e);
        sys.exit(1)

    sys.exit(0);

if __name__ == "__main__":
    main()
